/*
File name: pop
*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#define MAXSIZE 50
#define FACTOR 5 // Price must be a multiple of factor
#define C_ARGS 2 // command line arguments needed for simulation
#define MIN 30   // set minimum price limit
#define MAX 105  // set maximum price limit
#define ERROR1 1
#define ERROR2 2
#define ERROR3 3
#define pence 20 // coin value for pence
#define DIME 10  // coin value for dime
#define NICKEL 5 // coin value for nickel

/* create struct type for  linked list*/
typedef struct NodeVal{
   int numVal;
   struct NodeVal* next;
}NodeVal;

/* print service error message encountered */
void print_error(int error) {

   switch (error) {
      case ERROR1:
         printf("Please specify selling price");
         printf(" as command line argument.\n");
         printf("Usage: pop [price]\n");
         break;
      case ERROR2:
          printf("Price must be from %d to %d centimes inclusive\n", MIN, MAX);
          break;
      case ERROR3:
          printf("Price must be a multiple of %d.\n", FACTOR);
          break;
      default:
          break;
   }
   return;
}

/* print pop price after dispensing or after refund */
void print_price(int argVal){

   printf("\nPop is %d centimes. Please insert", argVal);
   printf(" any combination of nickels [N or n],");
   printf(" dimes [D or d] or pences [P or p].");
   printf(" You can also press R or r for coin return.\n\n");

   return;
}

/* Print refund if requested or after completion of sale */
void get_refund(int num) {
   int dimeChange;
   int nickelChange;

   dimeChange = num / DIME; // calculate the number dimes to be returned as change
   nickelChange = (num % DIME) / NICKEL; // calculate number of nickels to be returned as change
   printf("%5sChange given: %d centimes as ", "", num);
   printf("%d dime(s) and %d nickels(s).\n", dimeChange, nickelChange);
   return;
}

/* Print balance after coin addition */
void print_balance(int num, int sum) {

   printf("%5sYou have inserted a total of %d centimes.\n", "", sum);// print total centimes added
   if (num > 0)
      printf("%5sPlease insert %d more centimes.\n", "", num); // print required number of centimes to complete sale
   else if (num <= 0) {
      printf("%5sPop is dispensed. Thank you for your business!", "");
      printf(" Please come again.\n"); // print dispensed message after completion of sale
   }
   return;
}

/* get coin input character from stdin */
void get_char(char* userChar) {

   printf("Enter coin (NDPR): ");
   scanf(" %c", userChar);
   *userChar = toupper(*userChar); // convert all characters to upper case
                                   // for logical comparison
   return;
}

/* add coin value to newly created node in the linked list */
void char_val(NodeVal* pt, char* userChar) {

   if (*userChar == 'P') {
      printf("%3spence detected\n","");
      pt->numVal = pence;
   }
   else if (*userChar == 'D') {
      printf("%3sDime detected\n","");
      pt->numVal = DIME;
   }
   else if (*userChar == 'N') {
      printf("%3sNickel detected\n","");
      pt->numVal = NICKEL;
   }
   else if (*userChar == 'R') {
     pt = NULL;
     free(pt); // free newly created node when no value is added
   }
   else {
      printf("%3sUnknown coin rejected.\n","");
      pt = NULL;
      free(pt); // free newly created node when no value is added
   }
   return;
}

/* Get the total sum of all values in the linked list */
int total_sum (NodeVal* first, NodeVal* pt) {
   if (first == NULL) return 0; // return 0 if pointer points to NULL
   int sum = 0;
   pt = first;
   while (pt != NULL) {
      sum = sum + pt->numVal;
      pt = pt->next;
   } // end while loop when pointer point to NULL
   return sum; // return sum of values before NULL
}

/* initialize values in linked list to zero after refund */
void empty_list(NodeVal* first) {

   NodeVal*pt = first;
   while(pt != NULL) {
      pt->numVal = 0;
      pt = pt->next;
   }// end while loop when pointer points to NULL
   return;
}

/* free list from memory use after shutdown */
void free_list(NodeVal* first) {
   NodeVal* pt;
   while(first != NULL) {
      pt = first;
      first = first->next;
      pt = NULL;
      free(pt);// free each NULL node
   }
   return;
}

int main(int argc, char* argv[]) {

   char strVal[MAXSIZE] = "";
   int argVal, balance, total = 0;
   char userChar;
   NodeVal* start;
   NodeVal* pnode;

   if (argc != C_ARGS )
      print_error(ERROR1); // print error if argv isn't correct
   else if (argc == C_ARGS){

      strcpy(strVal, *(argv+1));
      argVal = atoi(strVal);  // convert argv to integer

      if (argVal < MIN || argVal > MAX)
         print_error(ERROR2);  // print error if argv is not within price range
      else if (argVal % FACTOR != 0)
         print_error(ERROR3); // print error if argv isn't a multiple of five
      else {

         printf("\nWelcome to my C Pop Machine!\n");
         print_price(argVal);
         get_char(&userChar);
         start = NULL;

         while(userChar != 'E') {

            pnode = (NodeVal*) calloc (1, sizeof(NodeVal)); // create new node for each stdin

           /*add value to each newly created node if coin insert is correct or NUll node otherwise */
            char_val(pnode, &userChar);

           /* add new node to list if not NULL */
            if (pnode != NULL) {
               pnode->next = start; // puts pointer to the previous node in list
               start = pnode;  // update pointer to the address of new node.
            }
            if (userChar != 'R') {
               total = total_sum(start, pnode);
               balance = argVal - total;   // get the remainder needed for purchase
               print_balance(balance, total);
               if (balance <= 0) {
                  get_refund(total - argVal);  // print refund when price is met
                  empty_list(start);
                  total = total_sum(start, pnode); //initialize list to zero and update total
                  print_price(argVal);
               }
            }
            else {
              /* print refund if requested, initialize list values to zero and update total */
              get_refund(total);
              empty_list(start);
              total = total_sum(start, pnode);
              print_price(argVal);
           }
           get_char(&userChar);
         }
         /* print refund at exit and free list */
         get_refund(total);
         free_list(start);
         printf("Shutting down. Goodbye.\n\n");
      }
   }
   return 0;
}
